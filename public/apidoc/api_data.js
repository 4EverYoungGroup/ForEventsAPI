define({ "api": [  {    "type": "get",    "url": "/medias/list/:event_id",    "title": "get",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the full list of medias of an event</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> </ul>",    "name": "get",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "querystring": [          {            "group": "querystring",            "type": "String",            "optional": false,            "field": "event_id",            "description": "<p>Id of Event, object Id of MongoDB database</p>"          }        ],        "body": [          {            "group": "body",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>Used to paginate result, number of pages you skip in the result obtained. By default 0</p>"          },          {            "group": "body",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>Number of result per page. By default 100</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "sort",            "description": "<p>Select the name of field to order, for example 'name'. If your use the sign - before the name of the field you sort in inverted order</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "includeTotal",            "description": "<p>You can set to true if you want to obtain also the total number of registered recovered</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "fields",            "description": "<p>You can define the name of fields you want to recover from the databae. You must specify them separating them with spaces. Example 'name description url'</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "border",            "description": "<p>You can set to true if you want to obtain only the media marked like 'poster'. Main picture of the event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "result",            "description": "<p>array medias</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "rows",            "description": "<p>JSON Object with the media info of the event</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 Created\n    {\n  \"ok\": true,\n  \"result\": {\n      \"rows\": [\n          {\n              \"poster\": false,\n              \"_id\": \"5bfef85b799887eb34ea2f8a\",\n              \"name\": \"foto11\",\n              \"description\": \"\",\n              \"url\": \"http://hello.com\",\n              \"media_type\": \"picture\"\n          },\n          {\n              \"poster\": false,\n              \"_id\": \"5bfef86b799887eb34ea2f8b\",\n              \"url\": \"https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543828920528_Events_post_Insercion%20de%20Eventos.png?alt=media&token=24490ea9-8e94-414b-ae65-837cdea5fccb\",\n              \"media_type\": \"picture\",\n              \"name\": \"Cumplea√±os\",\n              \"description\": \"pues vaya\"\n          },\n      ]\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "event_format_is_not_correct",            "description": "<p>The event_id doesn't have a valid format Object Id MongoDB</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>Event doesn't exist</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"event_not_exists\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"event_format_is_not_correct\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/medias.js",    "groupTitle": "Media"  },  {    "type": "post",    "url": "/medias/",    "title": "post",    "version": "1.0.0",    "description": "<p>This endpoint allow user to register  medias (picture/video) to an event. Your id user is registed with the media</p>",    "name": "post",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'.\nThis action is only allow user with role of Organizer or Admin"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Name of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"picture\"",              "\"video\""            ],            "optional": false,            "field": "media_type",            "description": "<p>Media type values allowed 'video' or 'picture'</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "description",            "description": "<p>Description of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>URL provided by Firebase system asociated to media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "optional": false,            "field": "event",            "description": "<p>id of Event associated to the media file</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "poster",            "description": "<p>You can specify like 'poster' to establish like main media for this event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>&quot;media_registered&quot;</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>{ object media recently stored }</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"ok\": true,\n      \"message\": \"media_registered\",\n      \"data\": {\n              \"media_type\": [\n                             \"video\"\n                             ],\n              \"_id\": \"5bd88b1df9e5bd4177da575b\",\n              \"name\": \"foto1\",\n              \"description\": \"kksksksks\",\n              \"url\": \"http://ex.com\",\n              \"event\": \"5bd177e2f20d3103eb50d9c1\",\n              \"user\": \"5bedd86ca2b814bafbadf7c9\",\n              \"poster\": false, \n              \"__v\": 0\n              }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>you must be an admin or organizer to register media to an event</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_id_must_be_provided",            "description": "<p>must provide event_id valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>event_id not found in database</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"media_not_registered\"\n}    \n\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/medias.js",    "groupTitle": "Media"  },  {    "type": "delete",    "url": "/users/:user_id",    "title": "delete",    "version": "1.0.0",    "description": "<p>This endpoint allows user to delete his user from the system.</p> <p>Restrictions:</p> <ul> <li>Only authenticated user can do this action</li> <li>Only the owner of the account or the administrator can delete an user</li> <li>When you delete a user all the events and searches saved will be deleted.</li> <li>The transacctions of user will not be deleted for statistics use</li> </ul>",    "name": "delete",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "user_id",            "description": "<p>Id of User, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_deleted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"ok\": true,\n      \"message\": \"user_deleted\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_not_found",            "description": "<p>The email of the User was not found</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The password is incorrect for user provided</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_credentials_error",            "description": "<p>Action not allowed with token provided</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"email_not_exist\"\n}\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  },  {    "type": "get",    "url": "/users/:user_id",    "title": "get",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the profile information of an user</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> <li>Any user authenticated can do this action if he's not the owner of the account the info provided is restricted</li> </ul>",    "name": "get",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "user_id",            "description": "<p>Id of User, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_info</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user consulted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 201 Created\n{\n   \"ok\": true,\n   \"message\": \"user_info\",\n   \"user\": {\n      \"email\": \"test@gmail.com\",\n      \"password\": \"b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219\",\n      \"first_name\": \"Pepe\",\n      \"last_name\": \"Garc√≠a\"\n   }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_email_duplicated",            "description": "<p>The email of the user is duplicated in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The password is incorrect for user provided</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_first_name",            "description": "<p>The lenght of first_name must be min 2 character</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_email",            "description": "<p>The format of the email provided must be correct</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"user_not_exist\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/login",    "title": "login",    "version": "1.0.0",    "description": "<p>This endpoint allow user to authenticate in the system, the user must introduce email and password associated</p>",    "name": "login",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Password of the user</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Token associated to user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"ok\": true,\n      \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjViZDE3N2UyZjIwZDMxMDNlYjUwZDljMiIsImVtYWlsIjoiYWZlcm5hbmRlemdyQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiODZhNTNkZDMzYWEyMTEyYWEwMWEwM2VkNDg4YTc5NGNmYmJmZTkyNjA3Njc4ODI3ZTI1YjdiMWY1MmRhZDhhMiIsImZpcnN0TmFtZSI6IlBlcGUiLCJsYXN0TmFtZSI6IlBlcmV6IiwiX192IjowfSwiaWF0IjoxNTQwNTQzODg2LCJleHAiOjE1NDA3MTY2ODZ9.PCOKKjIULDZJxzGZBmYUe-kiLJcW4FzIvAByNYnSpuU\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_not_found",            "description": "<p>The email of the User was not found</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The password is incorrect for user provided</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_not_found\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_wrong_password\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/recover",    "title": "recover",    "version": "1.0.0",    "description": "<p>This endpoint allows user to recover the password to access the system. An email will be sent to user with a link to establish the new password</p>",    "name": "recover",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>recover-message-sent</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"ok\": true,\n  \"message\": \"recover-message-sent\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "error_accesing_data",            "description": "<p>Error accesing database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "email_not_registered",            "description": "<p>Email not registered in database</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"email_not_registered\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/register",    "title": "register",    "version": "1.0.0",    "description": "<p>This endpoint allow user to register. The user must provide first name, last name, email, password</p> <ul> <li>It's not allowed to register two users with the same email</li> <li>Email format must be valid</li> <li>Passord must follow this rules: 6-50 length characters, must include one digit, one letter lower case and one letter upper case</li> </ul>",    "name": "register",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "first_name",            "description": "<p>First name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "last_name",            "description": "<p>Last name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Password of the user</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_created</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user recentfly created</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 201 Created\n{\n   \"ok\": true,\n   \"message\": \"user_created\",\n   \"user\": {\n      \"email\": \"test@gmail.com\",\n      \"password\": \"b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219\",\n      \"first_name\": \"Pepe\",\n      \"last_name\": \"Garc√≠a\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_email_duplicated",            "description": "<p>The email of the user is duplicated in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The password is incorrect for user provided</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_first_name",            "description": "<p>The lenght of first_name must be min 2 character</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_email",            "description": "<p>The format of the email provided must be correct</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_email_duplicated\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false,\n  \"errors\": [\n  {\n      \"field\": \"first_name\",\n      \"message\": \"validation_invalid_first_name\"\n  },\n  {\n      \"field\": \"email\",\n      \"message\": \"validation_invalid_email\"\n  },\n  {\n      \"field\": \"password\",\n      \"message\": \"password_not_valid_must_include_uppercase_lowercase_digits\"\n  }]\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  },  {    "type": "put",    "url": "/users/user_id",    "title": "update",    "version": "1.0.0",    "description": "<p>This endpoint allow user update the data of the user.</p> <ul> <li>It's only allowed to update data to owner of the account or an administrator</li> </ul>",    "name": "update",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "first_name",            "description": "<p>First name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "last_name",            "description": "<p>Last name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Password of the user</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_created</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user recently updated</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Created\n{\n   \"ok\": true,\n   \"message\": \"user_info\",\n   \"user\": {\n      \"email\": \"test@gmail.com\",\n      \"password\": \"\",\n      \"first_name\": \"Pepe\",\n      \"last_name\": \"Garc√≠a\"\n   }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_email_duplicated",            "description": "<p>The email of the user is duplicated in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The password is incorrect for user provided</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_first_name",            "description": "<p>The lenght of first_name must be min 2 character</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "validation_invalid_email",            "description": "<p>The format of the email provided must be correct</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"email_not_exist\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false,\n  \"errors\": [\n  {\n      \"field\": \"first_name\",\n      \"message\": \"validation_invalid_first_name\"\n  },\n  {\n      \"field\": \"email\",\n      \"message\": \"validation_invalid_email\"\n  },\n  {\n      \"field\": \"password\",\n      \"message\": \"password_not_valid_must_include_uppercase_lowercase_digits\"\n  }]\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/users.js",    "groupTitle": "User"  }] });
