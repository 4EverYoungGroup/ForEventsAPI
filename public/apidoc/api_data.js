define({ "api": [  {    "type": "delete",    "url": "/medias/:media_id",    "title": "delete",    "version": "1.0.0",    "description": "<p>This endpoint allows user to delete media associated to anhis user from the system.</p> <p>Restrictions:</p> <ul> <li>Only an user with role of Administrator or Organizer can do this action</li> <li>One organizer only can delete media of his events</li> </ul>",    "name": "delete",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "params": [          {            "group": "params",            "type": "String",            "optional": false,            "field": "media_id",            "description": "<p>Id of Media, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>media_deleted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "media_not_exist",            "description": "<p>The email of the User was not found</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "error_accesing_data",            "description": "<p>Error undefined accesing data</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>If the user trying to do the action is not the Orgnizer creator of the event associated or not he is an Administrator</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "delete_not_allowed_mark_another_media_poster_true_previously",            "description": "<p>If you try to delete a media marked like poster, you must define another media of the event previously to delete this media</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"media_not_exist\"\n}\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_to_credentials_provided\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/medias.apidoc",    "groupTitle": "Media"  },  {    "type": "get",    "url": "/medias/:media_id",    "title": "get",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the information about a media registered in the system</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> </ul>",    "name": "get",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "querysting": [          {            "group": "querysting",            "type": "String",            "optional": false,            "field": "media_id",            "description": "<p>Id of Media, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>media_info</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "media",            "description": "<p>JSON Object with the data of the media consulted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 \n  {\n    \"ok\": true,\n    \"message\": \"media_info\",\n    \"media\": {\n                \"poster\": false,\n                 \"_id\": \"5bd86fc83846843c189933ba\",\n                 \"media_type\": \"picture\",\n                 \"name\": \"foto1\",\n                 \"description\": \"\",\n                 \"url\": \"http://ex.com\",\n                 \"event_id\": \"5bd177e2f20d3103eb50d9c2\",\n                 \"__v\": 0\n              }\n  }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "media_not_exists",            "description": "<p>media_id not found in database</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"media_not_exist\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/medias.apidoc",    "groupTitle": "Media"  },  {    "type": "get",    "url": "/medias/list/:event_id",    "title": "get list",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the full list of medias of an event</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> </ul>",    "name": "get_list",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "querystring": [          {            "group": "querystring",            "type": "String",            "optional": false,            "field": "event_id",            "description": "<p>Id of Event, object Id of MongoDB database</p>"          }        ],        "params": [          {            "group": "params",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>Used to paginate result, number of pages you skip in the result obtained. By default 0</p>"          },          {            "group": "params",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>Number of result per page. By default 100</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "sort",            "description": "<p>Select the name of field to order, for example 'name'. If your use the sign - before the name of the field you sort in inverted order</p>"          },          {            "group": "params",            "type": "Boolean",            "optional": true,            "field": "includeTotal",            "description": "<p>You can set to true if you want to obtain also the total number of registered recovered</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "fields",            "description": "<p>You can define the name of fields you want to recover from the databae. You must specify them separating them with spaces. Example 'name description url'</p>"          },          {            "group": "params",            "type": "Boolean",            "optional": true,            "field": "poster",            "description": "<p>You can set to true if you want to obtain only the media marked like 'poster'. Main picture of the event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "result",            "description": "<p>array medias</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "rows",            "description": "<p>JSON Object with the media info of the event</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 Created\n    {\n  \"ok\": true,\n  \"result\": {\n      \"rows\": [\n          {\n              \"poster\": false,\n              \"_id\": \"5bfef85b799887eb34ea2f8a\",\n              \"name\": \"foto11\",\n              \"description\": \"\",\n              \"url\": \"http://hello.com\",\n              \"media_type\": \"picture\"\n          },\n          {\n              \"poster\": false,\n              \"_id\": \"5bfef86b799887eb34ea2f8b\",\n              \"url\": \"https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543828920528_Events_post_Insercion%20de%20Eventos.png?alt=media&token=24490ea9-8e94-414b-ae65-837cdea5fccb\",\n              \"media_type\": \"picture\",\n              \"name\": \"Cumpleaños\",\n              \"description\": \"pues vaya\"\n          },\n      ]\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "event_format_is_not_correct",            "description": "<p>The event_id doesn't have a valid format Object Id MongoDB</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>Event doesn't exist</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"event_not_exists\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"event_format_is_not_correct\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/medias.apidoc",    "groupTitle": "Media"  },  {    "type": "post",    "url": "/medias/",    "title": "post",    "version": "1.0.0",    "description": "<p>This endpoint allow user to register  medias (picture/video) to an event. Your id user is registed with the media</p>",    "name": "post",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'.\nThis action is only allow user with role of Organizer or Admin"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Name of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"picture\"",              "\"video\""            ],            "optional": false,            "field": "media_type",            "description": "<p>Media type values allowed 'video' or 'picture'</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "description",            "description": "<p>Description of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>URL provided by Firebase system asociated to media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "optional": false,            "field": "event",            "description": "<p>id of Event associated to the media file</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "poster",            "description": "<p>You can specify like 'poster' to establish like main media for this event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>&quot;media_registered&quot;</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>{ object media recently stored }</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"ok\": true,\n      \"message\": \"media_registered\",\n      \"data\": {\n              \"media_type\": [\n                             \"video\"\n                             ],\n              \"_id\": \"5bd88b1df9e5bd4177da575b\",\n              \"name\": \"foto1\",\n              \"description\": \"kksksksks\",\n              \"url\": \"http://ex.com\",\n              \"event\": \"5bd177e2f20d3103eb50d9c1\",\n              \"user\": \"5bedd86ca2b814bafbadf7c9\",\n              \"poster\": false, \n              \"__v\": 0\n              }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>you must be an admin or organizer to register media to an event</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_id_must_be_provided",            "description": "<p>must provide event_id valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>event_id not found in database</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"media_not_registered\"\n}    \n\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/medias.apidoc",    "groupTitle": "Media"  },  {    "type": "put",    "url": "/medias/media_id",    "title": "update",    "version": "1.0.0",    "description": "<p>This endpoint allow user update the data a media.</p> <ul> <li>It's only allowed to update data to Organizer of the event or an administrator</li> </ul>",    "name": "update",    "group": "Media",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Name of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"picture\"",              "\"video\""            ],            "optional": false,            "field": "media_type",            "description": "<p>Media type values allowed 'video' or 'picture'</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "description",            "description": "<p>Description of the media (video or picture)</p>"          },          {            "group": "body",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>URL provided by Firebase system asociated to media (video or picture)</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "poster",            "description": "<p>You can specify like 'poster' to establish like main media for this event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>media_updated</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user recently updated</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Created\n{\n   \"ok\": true,\n   \"message\": \"media_updated\",\n    \"media\": {\n                 \"poster\": false,\n                 \"_id\": \"5bfef86b799887eb34ea2f8b\",\n                 \"url\": \"https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543828920528_Events_post_Insercion%20de%20Eventos.png?alt=media&token=24490ea9-8e94-414b-ae65-837cdea5fccb\",\n                 \"media_type\": \"picture\",\n                 \"event\": \"5bfef45a4dd10ae820fdeaa7\",\n                 \"__v\": 0,\n                 \"name\": \"Cumpleaños\",\n                 \"description\": \"pues vaya\"\n            }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "nothing_to_update",            "description": "<p>If not changes are detected</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "error_accesing_data",            "description": "<p>Error undefinid accesing data</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "media_not_exist",            "description": "<p>No exists in databe the media_id specified</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>If the user trying to do the action is not the Orgnizer creator of the event associated or not he is an Administrator</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "error_updating_previous_picture_poster",            "description": "<p>If a media with poster established to true the system fail to set the previous media to poster equal to false</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"media_not_exist\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false,\n  \"errors\": [\n              {\n                  \"field\": \"name\",\n                  \"message\": \"\\\"_name\\\" is required\"\n              },\n            ]\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/medias.apidoc",    "groupTitle": "Media"  },  {    "type": "delete",    "url": "/transactions/:transaction_id",    "title": "delete",    "version": "1.0.0",    "description": "<p>This endpoint allows user to delete registration of the an user to an event</p> <p>Restrictions:</p> <ul> <li>Only an user with role of Administrator or owner of the transaction (subcription) can do this action</li> </ul>",    "name": "delete",    "group": "Transaction",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "params": [          {            "group": "params",            "type": "String",            "optional": false,            "field": "transaction_id",            "description": "<p>Id of Transaction, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>transaction_deleted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "transaction_not_exist",            "description": "<p>The transacction_id not exists in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "error_accesing_data",            "description": "<p>Error undefined accesing data</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>If the user trying to do the action is not the owner of the transaction or and Administrator</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"transaction_not_exist\"\n}\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_to_credentials_provided\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/transactions.apidoc",    "groupTitle": "Transaction"  },  {    "type": "get",    "url": "/transactions/:transaction_id",    "title": "get",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the information about a transaction registered in the system</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> </ul>",    "name": "get",    "group": "Transaction",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "querysting": [          {            "group": "querysting",            "type": "String",            "optional": false,            "field": "transaction_id",            "description": "<p>Id of Transaction, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>transaction_info</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "transaction",            "description": "<p>JSON Object with the data of the transaction consulted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 \n  {\n    \"ok\": true,\n    \"message\": \"transaction_info\",\n    \"data\": {\n                 \"_id\": \"5c101895a0abb05588646b84\",\n                 \"create_date\": \"2018-12-11T20:05:41.294Z\",\n                 \"event\": \"5bf860bcc9042e0eedecae4d\",\n                 \"user\": \"5bfa701cc3d2ae826e4ebc55\",\n                 \"__v\": 0\n               }\n  }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "transaction_not_exists",            "description": "<p>transaction_id not found in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_credentials_error",            "description": "<p>The trying to obtain info about the transction is not user that created it or user is not an Admin</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"transaction_not_exist\"\n}\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/transactions.apidoc",    "groupTitle": "Transaction"  },  {    "type": "get",    "url": "/transactions/list",    "title": "get list",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the full list of transactions associated to the user specified in the token used to access</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> <li>Only can be listed the transactions of the user_id especifed in the token access</li> </ul>",    "name": "get_list",    "group": "Transaction",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "params": [          {            "group": "params",            "type": "String",            "optional": true,            "field": "user",            "description": "<p>If you are an Admin you can obtain the transaction of any user specifying the object_id of the user desired</p>"          },          {            "group": "params",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>Used to paginate result, number of pages you skip in the result obtained. By default 0</p>"          },          {            "group": "params",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>Number of result per page. By default 100</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "sort",            "description": "<p>Select the name of field to order, for example 'name'. If your use the sign - before the name of the field you sort in inverted order</p>"          },          {            "group": "params",            "type": "Boolean",            "optional": true,            "field": "includeTotal",            "description": "<p>You can set to true if you want to obtain also the total number of registered recovered</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "fields",            "description": "<p>You can define the name of fields you want to recover from the databae. You must specify them separating them with spaces. Example 'name description url'</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "result",            "description": "<p>array transactions</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "rows",            "description": "<p>JSON Object with the transction associated to user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 Created\n{\n  \"ok\": true,\n  \"result\": [\n      {\n          \"_id\": \"5c0c278adc3dde4200eb9234\",\n          \"create_date\": \"2018-12-08T20:20:26.576Z\",\n          \"event\": {\n              \"location\": {\n                  \"coordinates\": [\n                      -5.748529,\n                      41.513958\n                  ],\n                  \"type\": \"Point\"\n              },\n              \"users\": [],\n              \"transactions\": [\n                  \"5c0c278adc3dde4200eb9234\"\n              ],\n              \"media\": [\n                  {\n                      \"poster\": false,\n                      \"_id\": \"5c0ba11ae16f267c890cf5f3\",\n                      \"name\": \"Cumpleaños\",\n                      \"description\": \"\",\n                      \"url\": \"https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543758968269_Events_get_Consulta%20de%20Eventos.png?alt=media&token=5191f146-4008-427e-85d5-3893bd99325c\",\n                      \"media_type\": \"picture\",\n                      \"event\": \"5bf860bcc9042e0eedecae4d\",\n                      \"user\": \"5bedd86ca2b814bafbadf7c9\",\n                      \"__v\": 0\n                  }\n              ],\n              \"_id\": \"5bf860bcc9042e0eedecae4d\",\n              \"begin_date\": \"2018-12-22T11:30:00.000Z\",\n              \"end_date\": \"2018-12-31T14:45:15.000Z\",\n              \"address\": \"Calle San Blas, 15\",\n              \"zip_code\": \"49023\",\n              \"city\": \"Zamora\",\n              \"province\": \"Zamora\",\n              \"country\": \"spain\",\n              \"indoor\": false,\n              \"max_visitors\": 500,\n              \"free\": true,\n              \"price\": 0,\n              \"min_age\": 0,\n              \"name\": \"Fiestas de caracol\",\n              \"description\": \"Carrera de caracoles en plaza Mayor 3ª ronda\",\n              \"organizer\": \"5bf838dc6d8e34f5f12b341d\",\n              \"event_type\": {\n                  \"_id\": \"5bf86080c9042e0eedecae4c\",\n                  \"name\": \"Atletismo\"\n              },\n              \"active\": true,\n              \"create_date\": \"2018-11-23T20:19:08.149Z\",\n              \"__v\": 0\n          },\n          \"user\": {\n              \"profile\": \"User\",\n              \"favorite_searches\": [],\n              \"transactions\": [],\n              \"events\": [],\n              \"validatedEmail\": true,\n              \"tokensFB\": [\n                  \"AAAAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X\",\n                  \"BAAAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X\"\n              ],\n              \"_id\": \"5bfa701cc3d2ae826e4ebc55\",\n              \"email\": \"user@gmail.com\",\n              \"first_name\": \"Johann\",\n              \"last_name\": \"\",\n              \"alias\": \"\",\n              \"address\": \"Calle Aguilucho\",\n              \"password\": \"b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219\",\n              \"province\": \"ÁLAVA\",\n              \"country\": \"\",\n              \"create_date\": \"2018-11-25T09:49:16.215Z\",\n              \"delete_date\": null,\n              \"__v\": 23,\n              \"city\": \"5bf4c17ba35d947902962eb3\"\n          }\n      }\n  ],\n  \"total\": 2\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_to_credentials_provided",            "description": "<p>If you are trying the transactions of an user and you are not an Admin</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>Event doesn't exist</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/transactions.apidoc",    "groupTitle": "Transaction"  },  {    "type": "post",    "url": "/transactions/",    "title": "post",    "version": "1.0.0",    "description": "<p>This endpoint allow user to register transactions (subcriptions to an event). Your id user is registed with the transactions and it's extracted from your token</p>",    "name": "post",    "group": "Transaction",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'."      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "optional": false,            "field": "event",            "description": "<p>id of Event associated to the media file</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>&quot;transaction_registered&quot;</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>{ object transaction recently stored }</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n  {\n       \"ok\": true,\n       \"message\": \"transaction_registered\",\n       \"data\": {\n                 \"_id\": \"5c101895a0abb05588646b84\",\n                 \"create_date\": \"2018-12-11T20:05:41.294Z\",\n                 \"event\": \"5bf860bcc9042e0eedecae4d\",\n                 \"user\": \"5bfa701cc3d2ae826e4ebc55\",\n                 \"__v\": 0\n               }\n  }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "event_id_must_be_provided",            "description": "<p>must provide event_id valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "event_not_exists",            "description": "<p>event_id not found in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_not_exists",            "description": "<p>user_id not found in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_already_registered_for_event",            "description": "<p>If the user is already registered for the event</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"event_not_exist\"\n}    \n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_not_exist\"\n}  \n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/transactions.apidoc",    "groupTitle": "Transaction"  },  {    "type": "delete",    "url": "/users/:user_id",    "title": "delete",    "version": "1.0.0",    "description": "<p>This endpoint allows user to delete his user from the system.</p> <p>Restrictions:</p> <ul> <li>Only authenticated user can do this action</li> <li>Only the owner of the account or the administrator can delete an user</li> <li>When you delete a user all the events and favorite searches saved will be deleted.</li> <li>The transacctions of user will not be deleted, for statistics use</li> </ul>",    "name": "delete",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "params": [          {            "group": "params",            "type": "String",            "optional": false,            "field": "user_id",            "description": "<p>Id of User, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_deleted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 204 No content",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_not_found",            "description": "<p>The email of the User was not found</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "action_not_allowed_credentials_error",            "description": "<p>Action not allowed with token provided</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"user_not_exist\"\n}\n\nHTTP/1.1 403 Forbidden\n{\n  \"ok\": false\n  \"message\": \"action_not_allowed_credentials_error\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "get",    "url": "/users/:user_id",    "title": "get",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the profile information of an user</p> <p>Restrictions:</p> <ul> <li>Only authenticated users can do this action</li> <li>Any user authenticated can do this action if he's not the owner of the account the info provided is restricted</li> </ul>",    "name": "get",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "query": [          {            "group": "query",            "type": "String",            "optional": false,            "field": "user_id",            "description": "<p>Id of User, object Id of MongoDB database</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_info</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user consulted</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 201 Created\n{\n   \"ok\": true,\n   \"message\": \"user_info\",\n    \"user\": {\n                   \"profile\": \"User\",\n                   \"favorite_searches\": [],\n                   \"transactions\": [],\n                   \"events\": [],\n                   \"validatedEmail\": true,\n                   \"tokensFB\": [],\n                   \"_id\": \"5c0e81ad5f27e61c6704a545\",\n                   \"email\": \"user_test@gmail.com\",\n                   \"first_name\": \"Peter\",\n                   \"last_name\": \"Smith\",\n                   \"alias\": \"krakatoa\",\n                   \"address\": \"Calle Osobuco 1\",\n                   \"password\": \"\",\n                   \"province\": \"Madrid\",\n                   \"country\": \"España\",\n                   \"mobile_number\": \"+34620031521\",\n                   \"phone_number\": \"+34910031523\",\n                   \"city\": \"5beda5ae3d2b312a351dc0ba\",\n                   \"create_date\": \"2018-12-10T15:09:33.068Z\",\n                   \"delete_date\": null,\n                   \"__v\": 0\n              }\n   }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"user_not_exist\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "get",    "url": "/users/list",    "title": "get list",    "version": "1.0.0",    "description": "<p>This endpoint allow to recover the list of users following several criterias</p> <p>Restrictions:</p> <ul> <li>Only with role Admin  users can do this action</li> </ul>",    "name": "get_list",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "params": [          {            "group": "params",            "type": "String",            "optional": true,            "field": "queryText",            "description": "<p>You can specify a free text in this param, this text will be used to search in database users in fields first_name, last_name, alias, company_name,email, phone_number,mobile_number,address</p>"          },          {            "group": "params",            "type": "Date",            "optional": true,            "field": "begin_date",            "description": "<p>To establish a range of search over the create_date field, begin_date of interval</p>"          },          {            "group": "params",            "type": "Date",            "optional": true,            "field": "end_date",            "description": "<p>To establish a range of search over the create_date field, end_date of interval</p>"          },          {            "group": "params",            "type": "String",            "allowedValues": [              "\"Admin\"",              "\"Organizer\"",              "\"User\""            ],            "optional": true,            "field": "profile",            "description": "<p>Specifiy role of user to search in database.</p>"          },          {            "group": "params",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>Used to paginate result, number of pages you skip in the result obtained. By default 0</p>"          },          {            "group": "params",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>Number of result per page. By default 100</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "sort",            "description": "<p>Select the name of field to order, for example 'name'. If your use the sign - before the name of the field you sort in inverted order</p>"          },          {            "group": "params",            "type": "Boolean",            "optional": true,            "field": "includeTotal",            "description": "<p>You can set to true if you want to obtain also the total number of registered recovered</p>"          },          {            "group": "params",            "type": "String",            "optional": true,            "field": "fields",            "description": "<p>You can define the name of fields you want to recover from the databae. You must specify them separating them with spaces. By default we recover fields:  first_name last_name profile email</p>"          },          {            "group": "params",            "type": "Boolean",            "optional": true,            "field": "border",            "description": "<p>You can set to true if you want to obtain only the media marked like 'poster'. Main picture of the event</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "result",            "description": "<p>array users</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "rows",            "description": "<p>JSON Object with the media info of the event</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 Created\n    {\n      \"ok\": true,\n      \"result\": {\n      \"rows\": [\n                {\n                    \"profile\": \"User\",\n                    \"_id\": \"5be95964a40e7108d2f6e2d7\",\n                    \"email\": \"test@gmail.com\",\n                    \"first_name\": \"Pepe\",\n                    \"last_name\": \"García\",\n                    \"alias\": \"pepito\",\n                    \"zip_code\": \"28000\",\n                    \"province\": \"Madrid\",\n                    \"address\": \"Calle del Berro 3\",\n                    \"company_name\": \"Empresa SA\",\n                    \"city\": \"012345678901234567890123\",\n                    \"create_date\": \"2018-11-12T10:43:48.753Z\"\n                },\n                {\n                    \"profile\": \"User\",\n                    \"_id\": \"5be94ba1230ce20638353346\",\n                    \"email\": \"test2@gmail.com\",\n                    \"first_name\": \"Pepa\",\n                    \"last_name\": \"García\",\n                    \"create_date\": \"2018-11-12T09:45:05.508Z\"\n                },\n                {\n                    \"profile\": \"User\",\n                    \"_id\": \"5be94bc2230ce20638353347\",\n                    \"email\": \"test3@gmail.com\",\n                    \"first_name\": \"Pepin\",\n                    \"last_name\": \"García\",\n                    \"create_date\": \"2018-11-12T09:45:38.571Z\"\n                }\n              \n             ],\n\n      \"total\": 3\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_format_is_not_correct",            "description": "<p>The user_id doesn't have a valid format Object Id MongoDB</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "user_not_exists",            "description": "<p>User doesn't exist</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"user_not_exists\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_format_is_not_correct\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/login",    "title": "login",    "version": "1.0.0",    "description": "<p>This endpoint allow user to authenticate in the system, the user must introduce email and password associated</p>",    "name": "login",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "size": "6..255",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "body",            "type": "String",            "size": "6..50",            "optional": false,            "field": "password",            "description": "<p>Password of the user</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Token associated to user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " HTTP/1.1 200 OK\n {\n       \"ok\": true,\n       \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjViZDE3N2UyZjIwZDMxMDNlYjUwZDljMiIsImVtYWlsIjoiYWZlcm5hbmRlemdyQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiODZhNTNkZDMzYWEyMTEyYWEwMWEwM2VkNDg4YTc5NGNmYmJmZTkyNjA3Njc4ODI3ZTI1YjdiMWY1MmRhZDhhMiIsImZpcnN0TmFtZSI6IlBlcGUiLCJsYXN0TmFtZSI6IlBlcmV6IiwiX192IjowfSwiaWF0IjoxNTQwNTQzODg2LCJleHAiOjE1NDA3MTY2ODZ9.PCOKKjIULDZJxzGZBmYUe-kiLJcW4FzIvAByNYnSpuU\"\n        \"user\": {\n        \"profile\": \"User\",\n        \"favorite_searches\": [],\n        \"transactions\": [],\n        \"events\": [],\n        \"validatedEmail\": true,\n        \"tokensFB\": [\n           \"31AAAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X\",\n           \"31AAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X\"\n        ],\n        \"_id\": \"5bfa701cc3d2ae826e4ebc55\",\n        \"email\": \"user@gmail.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"\",\n        \"password\": \"**ENCRYPTED**\",\n        \"alias\": \"anikiltor\",\n        \"address\": \"Calle Rue\",\n        \"province\": \"Madriles\",\n        \"country\": \"España\",\n        \"create_date\": \"2018-11-25T09:49:16.215Z\",\n        \"delete_date\": null,\n        \"__v\": 23\n        }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_wrong_password",            "description": "<p>The user or password are incorrect</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_or_password_wrong\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/recover",    "title": "recover",    "version": "1.0.0",    "description": "<p>This endpoint allows user to recover the password to access the system. An email will be sent to user with a link to reestablish the new password</p>",    "name": "recover",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>recover-message-sent</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"ok\": true,\n  \"message\": \"reset_password_email_sent\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "error_accesing_data",            "description": "<p>Error accesing database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "email_not_registered",            "description": "<p>Email not registered in database</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 500 Server error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}",          "type": "json"        },        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"email_not_registered\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users/register",    "title": "register",    "version": "1.0.0",    "description": "<p>This endpoint allow user to register. You will receive an email to confirm it after registration<br> Only users with Admin role can register user of type Organizer</p>",    "name": "register",    "group": "User",    "permission": [      {        "name": "none"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "size": "2..50",            "optional": false,            "field": "first_name",            "description": "<p>First name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "2..255",            "optional": true,            "field": "last_name",            "description": "<p>Last name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "alias",            "description": "<p>Alias of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "6..255",            "optional": false,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "body",            "type": "String",            "size": "6..50",            "optional": false,            "field": "password",            "description": "<p>Password of the user</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"Admin\"",              "\"Organizer\"",              "\"User\""            ],            "optional": false,            "field": "profile",            "defaultValue": "User",            "description": "<p>Type of users allowed in the system</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "address",            "description": "<p>Address of the user</p>"          },          {            "group": "body",            "type": "ObjectId",            "optional": true,            "field": "city",            "description": "<p>ObjectId of City, from collection City</p>"          },          {            "group": "body",            "type": "String",            "size": "20",            "optional": true,            "field": "zip_code",            "description": "<p>Zip code of address of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "province",            "description": "<p>Province of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "country",            "description": "<p>Country of the user</p>"          },          {            "group": "body",            "type": "Date",            "optional": true,            "field": "birthday_date",            "description": "<p>Birthday date of the user</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"M\"",              "\"F\""            ],            "optional": true,            "field": "gender",            "description": "<p>Gender of user</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "idn",            "description": "<p>IDN of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "company_name",            "description": "<p>Company name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "12",            "optional": true,            "field": "mobile_number",            "description": "<p>Mobile number of the user, include country code, for example +346101234512</p>"          },          {            "group": "body",            "type": "String",            "size": "12",            "optional": true,            "field": "phone_number",            "description": "<p>Phone number of the user, include country code, for example +349101234512</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_created</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user recentfly created</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 201 Created\n {\n       \"ok\": true,\n       \"message\": \"user_created_email_email_sent\",\n       \"user\": {\n                   \"profile\": \"User\",\n                   \"favorite_searches\": [],\n                   \"transactions\": [],\n                   \"events\": [],\n                   \"validatedEmail\": false,\n                   \"tokensFB\": [],\n                   \"_id\": \"5c0e81ad5f27e61c6704a545\",\n                   \"email\": \"user_test@gmail.com\",\n                   \"first_name\": \"Peter\",\n                   \"last_name\": \"Smith\",\n                   \"alias\": \"krakatoa\",\n                   \"address\": \"Calle Osobuco 1\",\n                   \"password\": \"b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219\",\n                   \"province\": \"Madrid\",\n                   \"country\": \"España\",\n                   \"mobile_number\": \"+34620031521\",\n                   \"phone_number\": \"+34910031523\",\n                   \"city\": \"5beda5ae3d2b312a351dc0ba\",\n                   \"create_date\": \"2018-12-10T15:09:33.068Z\",\n                   \"delete_date\": null,\n                   \"__v\": 0\n              }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "user_email_duplicated",            "description": "<p>The email of the user is duplicated in database</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "Format_of_data_provided",            "description": "<p>The system verify all the date provided in the call to the API follow the format established</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"ok\": false\n  \"message\": \"user_email_duplicated\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false,\n  \"errors\": [\n  {,\n      \"field\": \"first_name\",\n      \"message\": \"\\\"first_name\\\" is required\"\n   },\n  {\n      \"field\": \"email\",\n      \"message\": \"validation_invalid_email\"\n  },\n  {\n      \"field\": \"password\",\n      \"message\": \"password_not_valid_must_include_uppercase_lowercase_digits\"\n  }]\n}\n\nHTTP/1.1 500 Server error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  },  {    "type": "put",    "url": "/users/user_id",    "title": "update",    "version": "1.0.0",    "description": "<p>This endpoint allow user update the data of the user.</p> <ul> <li>It's only allowed to update data to owner of the account or an administrator</li> <li>Role of user the can't be changed</li> </ul>",    "name": "update",    "group": "User",    "permission": [      {        "name": "authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'"      }    ],    "parameter": {      "fields": {        "body": [          {            "group": "body",            "type": "String",            "size": "2..50",            "optional": true,            "field": "first_name",            "description": "<p>First name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "2..255",            "optional": true,            "field": "last_name",            "description": "<p>Last name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "alias",            "description": "<p>Alias of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "6..255",            "optional": true,            "field": "email",            "description": "<p>Email of the user (unique ID)</p>"          },          {            "group": "body",            "type": "String",            "size": "6..50",            "optional": true,            "field": "password",            "description": "<p>Password of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "address",            "description": "<p>Address of the user</p>"          },          {            "group": "body",            "type": "ObjectId",            "optional": true,            "field": "city",            "description": "<p>ObjectId of City, from collection City</p>"          },          {            "group": "body",            "type": "String",            "size": "20",            "optional": true,            "field": "zip_code",            "description": "<p>Zip code of address of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "province",            "description": "<p>Province of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "country",            "description": "<p>Country of the user</p>"          },          {            "group": "body",            "type": "Date",            "optional": true,            "field": "birthday_date",            "description": "<p>Birthday date of the user</p>"          },          {            "group": "body",            "type": "String",            "allowedValues": [              "\"M\"",              "\"F\""            ],            "optional": true,            "field": "gender",            "description": "<p>Gender of user</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "idn",            "description": "<p>IDN of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "255",            "optional": true,            "field": "company_name",            "description": "<p>Company name of the user</p>"          },          {            "group": "body",            "type": "String",            "size": "12",            "optional": true,            "field": "mobile_number",            "description": "<p>Mobile number of the user, include country code, for example +346101234512</p>"          },          {            "group": "body",            "type": "String",            "size": "12",            "optional": true,            "field": "phone_number",            "description": "<p>Phone number of the user, include country code, for example +349101234512</p>"          },          {            "group": "body",            "type": "String",            "optional": true,            "field": "token_fb",            "description": "<p>Token Firebase of the device of the user</p>"          },          {            "group": "body",            "type": "Boolean",            "optional": true,            "field": "validatedEmail",            "description": "<p>To confirm the email of the user, by default is false</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Boolean",            "optional": false,            "field": "ok",            "description": "<p>true</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>user_updated</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>JSON Object with the data of the user recently updated</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Created\n{\n   \"ok\": true,\n   \"message\": \"user_info\",\n    \"user\": {\n                   \"profile\": \"User\",\n                   \"favorite_searches\": [],\n                   \"transactions\": [],\n                   \"events\": [],\n                   \"validatedEmail\": false,\n                   \"tokensFB\": [],\n                   \"_id\": \"5c0e81ad5f27e61c6704a545\",\n                   \"email\": \"user_test@gmail.com\",\n                   \"first_name\": \"Peter\",\n                   \"last_name\": \"Smith\",\n                   \"alias\": \"krakatoa\",\n                   \"address\": \"Calle Osobuco 1\",\n                   \"password\": \"b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219\",\n                   \"province\": \"Madrid\",\n                   \"country\": \"España\",\n                   \"mobile_number\": \"+34620031521\",\n                   \"phone_number\": \"+34910031523\",\n                   \"city\": \"5beda5ae3d2b312a351dc0ba\",\n                   \"create_date\": \"2018-12-10T15:09:33.068Z\",\n                   \"delete_date\": null,\n                   \"__v\": 0\n              }\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "password_not_valid_must_include_uppercase_lowercase_digits",            "description": "<p>The password must follow the rules of complexity established</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "Format_of_data_provided",            "description": "<p>The system verify all the date provided in the call to the API follow the format established*</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "\nHTTP/1.1 500 Server Error\n{\n  \"ok\": false\n  \"message\": \"error_accesing_data\"\n}\n\nHTTP/1.1 404 Not found\n{\n  \"ok\": false\n  \"message\": \"user_not_exist\"\n}\n\nHTTP/1.1 400 Bad Request\n{\n  \"ok\": false,\n  \"errors\": [\n  {,\n      \"field\": \"first_name\",\n      \"message\": \"\\\"first_name\\\" is required\"\n   },\n  {\n      \"field\": \"password\",\n      \"message\": \"password_not_valid_must_include_uppercase_lowercase_digits\"\n  }]\n}",          "type": "json"        }      ]    },    "filename": "ForEvents/routes/apiv1/apidoc/users.apidoc",    "groupTitle": "User"  }] });
