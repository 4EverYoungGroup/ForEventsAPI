/**
 *
 * @api {post} /users/login login
 * @apiversion 1.0.0
 * @apidescription This endpoint allow user to authenticate in the system, the user must introduce email and password associated
 * @apiName login
 * @apiGroup User
 * @apiPermission none
 *
 * @apiParam (body) {String{6..255}} email Email of the user (unique ID)
 * @apiParam (body) {String{6..50}} password Password of the user
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} token  Token associated to user
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *           "ok": true,
 *           "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjViZDE3N2UyZjIwZDMxMDNlYjUwZDljMiIsImVtYWlsIjoiYWZlcm5hbmRlemdyQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiODZhNTNkZDMzYWEyMTEyYWEwMWEwM2VkNDg4YTc5NGNmYmJmZTkyNjA3Njc4ODI3ZTI1YjdiMWY1MmRhZDhhMiIsImZpcnN0TmFtZSI6IlBlcGUiLCJsYXN0TmFtZSI6IlBlcmV6IiwiX192IjowfSwiaWF0IjoxNTQwNTQzODg2LCJleHAiOjE1NDA3MTY2ODZ9.PCOKKjIULDZJxzGZBmYUe-kiLJcW4FzIvAByNYnSpuU"
 *            "user": {
 *            "profile": "User",
 *            "favorite_searches": [],
 *            "transactions": [],
 *            "events": [],
 *            "validatedEmail": true,
 *            "tokensFB": [
 *               "31AAAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X",
 *               "31AAaXfomec:APA91bFX8EaL2A8BkDrmztRbkcg_PFAMQY1CtObe0BiywhA_nikfwmMLltCO1ipHaciF9TgMVMTdZoQkjZffRWC-9_8H-lskMkykPVQr8GrUJrqp1aowe7_MIW_dydODRh12TlXEhq6X"
 *            ],
 *            "_id": "5bfa701cc3d2ae826e4ebc55",
 *            "email": "user@gmail.com",
 *            "first_name": "John",
 *            "last_name": "",
 *            "password": "**ENCRYPTED**",
 *            "alias": "anikiltor",
 *            "address": "Calle Rue",
 *            "province": "Madriles",
 *            "country": "España",
 *            "create_date": "2018-11-25T09:49:16.215Z",
 *            "delete_date": null,
 *            "__v": 23
 *            }
 *    } 
 *
 * @apiError user_wrong_password The user or password are incorrect 
 *
 * @apiErrorExample Error-Response:
 * 
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false
 *       "message": "user_or_password_wrong"
 *     }
 */



/**
 * @api {post} /users/register register
 * @apiversion 1.0.0
 * @apidescription 
 * This endpoint allow user to register. You will receive an email to confirm it after registration  
 * 
 * @apiName register
 * @apiGroup User
 * @apiPermission none
 *
 * 
 * @apiParam (body) {String {2..50}} first_name First name of the user
 * @apiParam (body) {String {2..255}} [last_name] Last name of the user 
 * @apiParam (body) {String {255}} [alias] Alias of the user 
 * @apiParam (body) {String {6..255}} email Email of the user (unique ID)
 * @apiParam (body) {String {6..50}} password Password of the user
 * @apiParam (body) {String="Admin","Organizer","User"} profile="User" Type of users allowed in the system
 * @apiParam (body) {String {255}} [address] Address of the user 
 * @apiParam (body) {ObjectId} [city] ObjectId of City, from collection City
 * @apiParam (body) {String {20}} [zip_code] Zip code of address of the user 
 * @apiParam (body) {String {255}} [province] Province of the user
 * @apiParam (body) {String {255}} [country] Country of the user  
 * @apiParam (body) {Date} [birthday_date] Birthday date of the user
 * @apiParam (body) {String="M","F"} [gender] Gender of user
 * @apiParam (body) {String} [idn] IDN of the user
 * @apiParam (body) {String {255}} [company_name] Company name of the user
 * @apiParam (body) {String {12}} [mobile_number] Mobile number of the user, include country code, for example +346101234512
 * @apiParam (body) {String {12}} [phone_number] Phone number of the user, include country code, for example +349101234512
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message  user_created
 * @apiSuccess {Object} user JSON Object with the data of the user recentfly created
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 201 Created
 *     {
 *        "ok": true,
 *        "message": "user_created",
 *        "user": {
 *           "email": "test@gmail.com",
 *           "password": "b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219",
 *           "first_name": "Pepe",
 *           "last_name": "García"
 *     }
 *
 *
 * @apiError user_email_duplicated The email of the user is duplicated in database
 * @apiError user_wrong_password The password is incorrect for user provided
 * @apiError validation_invalid_first_name The lenght of first_name must be min 2 character
 * @apiError validation_invalid_email The format of the email provided must be correct
 * @apiError password_not_valid_must_include_uppercase_lowercase_digits The password must follow the rules of complexity established
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false
 *       "message": "user_email_duplicated"
 *     }
 * 
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false,
 *       "errors": [
 *       {
 *           "field": "first_name",
 *           "message": "validation_invalid_first_name"
 *       },
 *       {
 *           "field": "email",
 *           "message": "validation_invalid_email"
 *       },
 *       {
 *           "field": "password",
 *           "message": "password_not_valid_must_include_uppercase_lowercase_digits"
 *       }]
 *     }
 */

/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/

 /**
 *
 * @api {post} /users/recover recover
 * @apiversion 1.0.0
 * @apidescription This endpoint allows user to recover the password to access the system. An email will be sent to user with a link to establish the new password
 * @apiName recover
 * @apiGroup User
 * @apiPermission none
 *
 * @apiParam {String} email Email of the user (unique ID)
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message recover-message-sent
 *
 * @apiSuccessExample Success-Response:
 * HTTP/1.1 200 OK
 * {
 *   "ok": true,
 *   "message": "recover-message-sent"
 * }
 *
 * @apiError error_accesing_data Error accesing database
 * @apiError email_not_registered Email not registered in database
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 500 Server error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false
 *       "message": "email_not_registered"
 *     }
 */

/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/

 /**
 *
 * @api {delete} /users/:user_id delete
 * @apiversion 1.0.0
 * @apidescription This endpoint allows user to delete his user from the system. 
 *
 *  Restrictions:
 * * Only authenticated user can do this action
 * * Only the owner of the account or the administrator can delete an user
 * * When you delete a user all the events and searches saved will be deleted.
 * * The transacctions of user will not be deleted for statistics use
 * 
 * @apiName delete
 * @apiGroup User
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam {String} user_id Id of User, object Id of MongoDB database
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message user_deleted
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *           "ok": true,
 *           "message": "user_deleted"
 *     }
 *
 * @apiError user_not_found The email of the User was not found
 * @apiError user_wrong_password The password is incorrect for user provided
 * @apiError action_not_allowed_credentials_error Action not allowed with token provided
 * 
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "email_not_exist"
 *     }
 * 
 *     HTTP/1.1 403 Forbidden
 *     {
 *       "ok": false
 *       "message": "action_not_allowed_credentials_error"
 *     }
 */

/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/

/**
 * @api {put} /users/user_id update
 * @apiversion 1.0.0
 * @apidescription 
 * This endpoint allow user update the data of the user. 
 * * It's only allowed to update data to owner of the account or an administrator
 * 
 * @apiName update
 * @apiGroup User
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * 
 * @apiParam {String} first_name First name of the user
 * @apiParam {String} last_name Last name of the user 
 * @apiParam {String} email Email of the user (unique ID)
 * @apiParam {String} password Password of the user
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message  user_created
 * @apiSuccess {Object} user JSON Object with the data of the user recently updated
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 Created
 *     {
 *        "ok": true,
 *        "message": "user_info",
 *        "user": {
 *           "email": "test@gmail.com",
 *           "password": "",
 *           "first_name": "Pepe",
 *           "last_name": "García"
 *        }
 *      }
 *
 * @apiError user_email_duplicated The email of the user is duplicated in database
 * @apiError user_wrong_password The password is incorrect for user provided
 * @apiError validation_invalid_first_name The lenght of first_name must be min 2 character
 * @apiError validation_invalid_email The format of the email provided must be correct
 * @apiError password_not_valid_must_include_uppercase_lowercase_digits The password must follow the rules of complexity established
 *
 * @apiErrorExample Error-Response:
 *
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "email_not_exist"
 *     }
 * 
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false,
 *       "errors": [
 *       {
 *           "field": "first_name",
 *           "message": "validation_invalid_first_name"
 *       },
 *       {
 *           "field": "email",
 *           "message": "validation_invalid_email"
 *       },
 *       {
 *           "field": "password",
 *           "message": "password_not_valid_must_include_uppercase_lowercase_digits"
 *       }]
 *     }
 */

/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/
/***********************************************************************************************************************************************/

 /**
 * @api {get} /users/:user_id get
 * @apiversion 1.0.0
 * @apidescription This endpoint allow to recover the profile information of an user
 * 
 * Restrictions:
 * * Only authenticated users can do this action
 * * Any user authenticated can do this action if he's not the owner of the account the info provided is restricted
 *
 * @apiName get
 * @apiGroup User
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam {String} user_id Id of User, object Id of MongoDB database
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message  user_info
 * @apiSuccess {Object} user JSON Object with the data of the user consulted
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 201 Created
 *     {
 *        "ok": true,
 *        "message": "user_info",
 *        "user": {
 *           "email": "test@gmail.com",
 *           "password": "b17e1e0450dac425ea318253f6f852972d69731d6c7499c001468b695b6da219",
 *           "first_name": "Pepe",
 *           "last_name": "García"
 *        }
 *     }
 *
 * @apiError user_email_duplicated The email of the user is duplicated in database
 * @apiError user_wrong_password The password is incorrect for user provided
 * @apiError validation_invalid_first_name The lenght of first_name must be min 2 character
 * @apiError validation_invalid_email The format of the email provided must be correct
 * @apiError password_not_valid_must_include_uppercase_lowercase_digits The password must follow the rules of complexity established
 *
 * @apiErrorExample Error-Response:
 * 
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "user_not_exist"
 *     }
 */