/**
 * @api {get} /medias/list/:event_id get list
 * @apiversion 1.0.0
 * @apidescription This endpoint allow to recover the full list of medias of an event
 * 
 * Restrictions:
 * * Only authenticated users can do this action
 *
 * @apiName get list
 * @apiGroup Media
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam (querystring) {String} event_id Id of Event, object Id of MongoDB database
 * @apiParam (params) {Number} [skip] Used to paginate result, number of pages you skip in the result obtained. By default 0
 * @apiParam (params) {Number} [limit] Number of result per page. By default 100
 * @apiParam (params) {String} [sort] Select the name of field to order, for example 'name'. If your use the sign - before the name of the field you sort in inverted order
 * @apiParam (params) {Boolean} [includeTotal] You can set to true if you want to obtain also the total number of registered recovered
 * @apiParam (params) {String} [fields] You can define the name of fields you want to recover from the databae. You must specify them separating them with spaces. Example 'name description url'
 * @apiParam (params) {Boolean} [poster] You can set to true if you want to obtain only the media marked like 'poster'. Main picture of the event
 *  
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} result array medias
 * @apiSuccess {Object} rows JSON Object with the media info of the event
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 Created
 *     {
 *   "ok": true,
 *   "result": {
 *       "rows": [
 *           {
 *               "poster": false,
 *               "_id": "5bfef85b799887eb34ea2f8a",
 *               "name": "foto11",
 *               "description": "",
 *               "url": "http://hello.com",
 *               "media_type": "picture"
 *           },
 *           {
 *               "poster": false,
 *               "_id": "5bfef86b799887eb34ea2f8b",
 *               "url": "https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543828920528_Events_post_Insercion%20de%20Eventos.png?alt=media&token=24490ea9-8e94-414b-ae65-837cdea5fccb",
 *               "media_type": "picture",
 *               "name": "Cumplea√±os",
 *               "description": "pues vaya"
 *           },
 *       ]
 *   }
 *}
 *
 * @apiError event_format_is_not_correct The event_id doesn't have a valid format Object Id MongoDB 
 * @apiError event_not_exists Event doesn't exist
 * @apiErrorExample Error-Response:
 * 
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "event_not_exists"
 *     }
 *  
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false
 *       "message": "event_format_is_not_correct"
 *     }
 * 
 */


 /**
 *
 * @api {post} /medias/ post
 * @apiversion 1.0.0
 * @apidescription This endpoint allow user to register  medias (picture/video) to an event. Your id user is registed with the media
 * @apiName post
 * @apiGroup Media
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'.
 * This action is only allow user with role of Organizer or Admin
 *
 * @apiParam (body) {String} name Name of the media (video or picture)
 * @apiParam (body) {String="picture","video"} media_type Media type values allowed 'video' or 'picture'
 * @apiParam (body) {String} [description] Description of the media (video or picture)
 * @apiParam (body) {String} url URL provided by Firebase system asociated to media (video or picture)
 * @apiParam (body) {String} event id of Event associated to the media file
 * @apiParam (body) {Boolean} [poster] You can specify like 'poster' to establish like main media for this event
 * 
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message "media_registered"
 * @apiSuccess {Object} data { object media recently stored }
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *           "ok": true,
 *           "message": "media_registered",
 *           "data": {
 *                   "media_type": [
 *                                  "video"
 *                                  ],
 *                   "_id": "5bd88b1df9e5bd4177da575b",
 *                   "name": "foto1",
 *                   "description": "kksksksks",
 *                   "url": "http://ex.com",
 *                   "event": "5bd177e2f20d3103eb50d9c1",
 *                   "user": "5bedd86ca2b814bafbadf7c9",
 *                   "poster": false, 
 *                   "__v": 0
 *                   }
 *      }
 *
 * @apiError action_not_allowed_to_credentials_provided you must be an admin or organizer to register media to an event
 * @apiError event_id_must_be_provided must provide event_id valid
 * @apiError event_not_exists event_id not found in database
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false
 *       "message": "media_not_registered"
 *     }    
 *
 * 
 *     HTTP/1.1 403 Forbidden
 *     {
 *       "ok": false
 *       "message": "action_not_allowed_credentials_error"
 *     }
 */


  /**
 * @api {get} /medias/:media_id get
 * @apiversion 1.0.0
 * @apidescription This endpoint allow to recover the information about a media registered in the system
 * 
 * Restrictions:
 * * Only authenticated users can do this action
 *
 * @apiName get
 * @apiGroup Media
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam (querysting) {String} media_id Id of Media, object Id of MongoDB database
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message  media_info
 * @apiSuccess {Object} media JSON Object with the data of the media consulted
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 
 *       {
 *         "ok": true,
 *         "message": "media_info",
 *         "media": {
 *                     "poster": false,
 *                      "_id": "5bd86fc83846843c189933ba",
 *                      "media_type": "picture",
 *                      "name": "foto1",
 *                      "description": "",
 *                      "url": "http://ex.com",
 *                      "event_id": "5bd177e2f20d3103eb50d9c2",
 *                      "__v": 0
 *                   }
 *       }
 *
 * @apiError media_not_exists media_id not found in database
 *
 * @apiErrorExample Error-Response:
 * 
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "media_not_exist"
 *     }
 */



  /**
 *
 * @api {delete} /medias/:media_id delete
 * @apiversion 1.0.0
 * @apidescription This endpoint allows user to delete media associated to anhis user from the system. 
 *
 *  Restrictions:
 * * Only an user with role of Administrator or Organizer can do this action
 * * One organizer only can delete media of his events
 * 
 * @apiName delete
 * @apiGroup Media
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam (params) {String} media_id Id of Media, object Id of MongoDB database
 *
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message media_deleted
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 204 No content
 *   
 *
 * @apiError media_not_exist The email of the User was not found
 * @apiError error_accesing_data Error undefined accesing data
 * @apiError action_not_allowed_to_credentials_provided If the user trying to do the action is not the Orgnizer creator of the event associated or not he is an Administrator
 * @apiError delete_not_allowed_mark_another_media_poster_true_previously If you try to delete a media marked like poster, you must define another media of the event previously to delete this media
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "media_not_exist"
 *     }
 * 
 *     HTTP/1.1 403 Forbidden
 *     {
 *       "ok": false
 *       "message": "action_not_allowed_to_credentials_provided"
 *     }
 */


 /**
 * @api {put} /medias/media_id update
 * @apiversion 1.0.0
 * @apidescription 
 * This endpoint allow user update the data a media. 
 * * It's only allowed to update data to Organizer of the event or an administrator
 * 
 * @apiName update
 * @apiGroup Media
 * @apiPermission authenticated_token_required: You must provide 'token' authorized in the querystring, body or header 'x-access-token'
 *
 * @apiParam (body) {String} name Name of the media (video or picture)
 * @apiParam (body) {String="picture","video"} media_type Media type values allowed 'video' or 'picture'
 * @apiParam (body) {String} [description] Description of the media (video or picture)
 * @apiParam (body) {String} url URL provided by Firebase system asociated to media (video or picture)
 * @apiParam (body) {Boolean} [poster] You can specify like 'poster' to establish like main media for this event
 * 
 * @apiSuccess {Boolean} ok true
 * @apiSuccess {String} message  media_updated
 * @apiSuccess {Object} user JSON Object with the data of the user recently updated
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 Created
 *     {
 *        "ok": true,
 *        "message": "media_updated",
 *         "media": {
 *                      "poster": false,
 *                      "_id": "5bfef86b799887eb34ea2f8b",
 *                      "url": "https://firebasestorage.googleapis.com/v0/b/forevents-3a85b.appspot.com/o/images%2F1543828920528_Events_post_Insercion%20de%20Eventos.png?alt=media&token=24490ea9-8e94-414b-ae65-837cdea5fccb",
 *                      "media_type": "picture",
 *                      "event": "5bfef45a4dd10ae820fdeaa7",
 *                      "__v": 0,
 *                      "name": "Cumplea√±os",
 *                      "description": "pues vaya"
 *                 }
 *      }
 *
 *  @apiError nothing_to_update If not changes are detected 
 *  @apiError error_accesing_data Error undefinid accesing data
 *  @apiError media_not_exist No exists in databe the media_id specified
 *  @apiError action_not_allowed_to_credentials_provided If the user trying to do the action is not the Orgnizer creator of the event associated or not he is an Administrator
 *  @apiError error_updating_previous_picture_poster If a media with poster established to true the system fail to set the previous media to poster equal to false
 *  @apiErrorExample Error-Response:
 *
 *     HTTP/1.1 500 Server Error
 *     {
 *       "ok": false
 *       "message": "error_accesing_data"
 *     }
 * 
 *     HTTP/1.1 404 Not found
 *     {
 *       "ok": false
 *       "message": "media_not_exist"
 *     }
 * 
 *     HTTP/1.1 400 Bad Request
 *     {
 *       "ok": false,
 *       "errors": [
 *                   {
 *                       "field": "name",
 *                       "message": "\"_name\" is required"
 *                   },
 *                 ]
 *     }
 */